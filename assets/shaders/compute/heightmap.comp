// Based on: https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
#version 430 core

layout (local_size_x = 16, local_size_y = 16) in;
layout (r32f, binding = 0) uniform writeonly image2D heightmap;

uniform int width;
uniform int octaves;

#define PI 3.14159265358979323846

float rand(vec2 c) {
	return fract(sin(dot(c.xy, vec2(12.9898,78.233))) * 43758.5453);
}

float noise(vec2 p, float freq) {
	float unit = width / freq;
	vec2 ij = floor(p/unit);
	vec2 xy = mod(p,unit)/unit;
	xy = .5*(1.-cos(PI*xy));
	float a = rand((ij+vec2(0.,0.)));
	float b = rand((ij+vec2(1.,0.)));
	float c = rand((ij+vec2(0.,1.)));
	float d = rand((ij+vec2(1.,1.)));
	float x1 = mix(a, b, xy.x);
	float x2 = mix(c, d, xy.x);
	return mix(x1, x2, xy.y);
}

float PerlinNoise(vec2 p, int res) {
	float persistance = .5;
	float n = 0.;
	float normK = 0.;
	float f = 4.;
	float amp = 1.;
	for (int i = 0; i < octaves; i++) {
		n+=amp*noise(p, f);
		f*=2.;
		normK+=amp;
		amp*=persistance;
	}
	float nf = n/normK;
	return nf*nf*nf*nf;
}

void main() {
    ivec2 x = ivec2(gl_GlobalInvocationID.xy);
    float n = PerlinNoise(gl_GlobalInvocationID.xy, octaves);
    imageStore(heightmap, x, vec4(vec3(n), 1.0));
}
